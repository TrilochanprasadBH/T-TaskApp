// //short quick revision of types in TS 
// let hmm:any= "any data type";
// let ohh: unknown = "any data type"  //this is better than any 
// let name: string="nidhish";
// let arrofstr : string[] =["ok","tp"];
// let arrofnum : number[] = [1,2,3];

// //tuples : can have multiple types of data , but fixed length
// let tuples: [number, string, object?]= [9,"ok", {a:"trilo"}];
// let marks : number |string = "ninety"

// //interface 
//  interface Person{
//   name:string,
//   age?:number 
//  }

//  let person:Person= {name:"trilo", age:20}
//  let arrayofpersons : Person[] = [{name:"p", age:90}, {name:"ok", age:56}]
 
//  function hesaru(para:string):void{
//   console.log(para)
//   //void is used when fn doesnt return but just does some action lyk console etc 
//   //also by default it means it returns undefined 
//  }
//  let fam : (kaam:string)=> void 
//  let naam:(name:string)=> never  
//  // never doesnt return anything  


extending types 

type Ok ={
    name: string,
    age:number 
}

type z = Ok & {
    place: string 
}

or type x = type Ok & type z 
or type x = type Ok or type z 
now type x =  {
    name,
    age,
    place 
}

Interface merging 

interface: interface declarations can be merged. 
If you declare the same interface name multiple times, 
TypeScript will automatically merge the declarations together.
interface Person {
    name: string;
}

interface Person {
    age: number;
}

// Merged Person interface
const person: Person = { name: "Alice", age: 30 };


MIX 

type DSA = {
    practise : string 
}

interface Geek extends dsa {
    home: string 
}
